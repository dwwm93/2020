# Cours TP DWWM

## Mardi 2020/10/06

* création des répertoires "Code/greta" pour stocker correctement son code

* présentation formation:

  * objectifs de la formation
  * front / back
  * langages de programmation

* présentation vscode

  * notamment Emmet (avec "lorem" etc. pour l'aide au développement) qui est intégré à vscode

* présentation html / css / javascript

### 1er projet rapide

* index.html => choisi parce que c'est la norme des pages d'accueil
* balises standard : html, head, body, main, article, section, h1, h2, h3 ...
* tests du style en changeant dynamiquement le style dans la console développeur du navigateur

En live j'ai fait un `Code/greta/first/index.html` aussi, de qualité médiocre pour jouer avec ce qu'il est possible de faire.

### Présentation projet du formateur

J'ai montré vite fait ma page de mariage, mais surtout j'ai codé devant eux en une trentaine de minutes la page "trombi.html" dans le dossier "Code/greta/first", avec bootstrap / material design / des placeholder / du javascript etc.

Ressources :
* [placeholder photos](picsum.photos)
* [placeholder avatars](http://avatars.adorable.io)
* [bootstrap4 + material design](https://mdbootstrap.github.io/bootstrap-material-design/docs/4.0/bootstrap-components/alerts/)

## Lundi 2020/10/12

### Selecteurs CSS

Ecrire un menu en haut de sa page : probleme avec les block et les inline. (on ne s'apesantit pas sur le sujet, on laisse juste galérer suffisamment pour qu'ils comprennent que ça marche pas top)

NB : Si on veut que le lien en haut de la page prenne tout l'élément il faut jouer avec ["line-height"](https://stackoverflow.com/questions/40755950/make-a-tag-to-take-100-height-of-inline-block-parent)

### flexbox

Introduction à flexbox, [resource ici](https://css-tricks.com/snippets/css/a-guide-to-flexbox/), qui permet de la mise en page (sur 1 dimension) de façon très très simple.

On a repris l'exemple précédent, et à la fin on se rend compte qu'il suffit que le parent soir `display: flex;` pour que directement les enfants s'alignent sur une même ligne de manière propre.

On a vu comment on les aligne sur l'axe principal (ici horizontal) et sur l'axe secondaire (donc l'axe vertical), avec les propriétés qui se terminent par "-content" (pour l'axe principal) et "-items" pour l'axe secondaire. Tout marche pareil si mon axe principal devient l'axe vertical. (ie `flex-direction:column;`)

On l'a appliqué sur un TP2 qui consiste à écrire une page d'un journal, avec un bandeau de navigation, une section centrale qui contient 3 articles en colonne côte à côte, puis une section "contact" qui contient du texte et un formulaire, et enfin un footer.

## Mardi 2020/10/13

Poursuite du TP2 avec révision de flexbox, et des balises les plus courantes (ex: input avec placeholder).

Notamment on appuyé sur comment faire des liens dans la page (et le rôle des "id").

### flexbox

Attention : un élément flexbox ne peut gérer que ses enfants directs, pas ses petits enfants ou arrière petits enfants. On a insisté sur ce point.

Quitte, pour plus de mise en page, à ce que les enfants deviennent eux mêmes des éléments flexbox et qu'ils gèrent leurs propres enfants.

### selecteurs CSS

Révision de comment fonctionnent les selecteurs CSS, comment on les manipule, qu'il faut être le plus précis possible pour ne pas modifier des éléments qu'on ne veut pas modifier, et qu'il faut limiter le nombre d'id et de class, qui ne doivent servir qu'en dernier recours.

En effet, il vaut mieux éviter d'avoir à changer le code html quand on veut changer un style, il vaut mieux changer juste le css. (exemple: rajouter un élément dans ma barre de nav, sans avoir à lui donner la bonne classe ! mon selecteur CSS est fait de manière à le prendre de toute façon ! au pire on met juste l'id sur le parent "nav")

En + : découverte des selecteurs 
* `:hover`
* `:last-child`

## Jeudi 2020/10/15

Poursuite du Flexbox et decouvert du responsive @media
* découverte de la balise DIV et SPAN
  * <div> est une balise du type BLOCK et elle est fermante </div>
  * <span> est une balise du type INLINE et elle est fermante </span>

### flexbox
travail sur TPFlex, utilisation des display, flex-wrap, flex-direction.

### @media
Changement du style CSS en au chamgement du taille de l'ecran
* @media (max-width: 600px) {
*    h1 {
*        display: none;
*    }
* }

## Vendredi 2020/10/16

Découverte des parametres 
* `display`
* `padding`
* `margin` 
* `border` 

### @media
Poursuite du TPFlex en responsive
### Positions
Découverte du parametre position et urilisation dasn le fichier position.html et position.css
* `static`
* `relative`
* `fixed` 
* `absolute` 
* `sticky`  

## Lundi 2020/10/19

Creation d'un CV à partir d'un model, en utilisent le html et CSS.
Tous le code demandé pour créee le CV est déjà expliquer dans les cours precedent.
Le CV doit etre responsive.
Le model du CV est ajouter sur SLACK en IMAGE
A la fin de journé le code est aussi envoyé sur SLACK

## Mardi 2020/10/20

Le matin, on continue sur le CV, explication du code du model.
Hierarchie des balises.

### Macquetter une application 

Nous avons devouvert le maquettage et disquter des 4 etapes de maquettage
Photo mis sur SLACK

* Zonning
* Wireframe
* Mockup
* Prototype

## Mercredi 2020/10/21

On reprend zoning / wireframe , et on apprend la distinction UX (plutot zoning/wireframe) / UI (plutôt mockup/prototype).

TP zoning / wireframe pour leur CV, sur diagrams.net.

Les questions portent sur les choix effectués en terme d'UX (pourquoi tel élément est là,pourquoi il fait cette taille ...) et sur les adaptations responsive.

Présentation d'éléments de design "standards", comme les règles proposées par le material design.

On a vu également quelques exemples de sites avec un bon UX/UI et d'autres catastrophiques.

## Jeudi 2020/10/22

Retour sur les wireframes et réalisation des mockups.

### Print CSS

Faire une version du css adaptée à l'impression pour générer un CV imprimé.

* [explication macro sur le site de mozilla](https://developer.mozilla.org/fr/docs/CSS/Premiers_pas/M%C3%A9dias#Impression)

### TODO

* [web design in 4 minutes](https://jgthms.com/web-design-in-4-minutes/)
* [interneting is hard](https://www.internetingishard.com/html-and-css/)

## Lundi 2020/10/26

Réalisation du site web pour le cv dont on avait fait le zoning, le wireframe et le mockup.

Obligation d'utiliser un positionnement fixed ou sticky pour le menu, et obligation de faire un site responsive.

Ceux qui ont eu le temps on essayé de faire une media query "print" que l'on peut voir en utilisant l'impression par chrome.

### Sélecteurs CSS

exo "inversé": à partir du sélecteur CSS proposer une arborescence HTML qui convient.

La subtilité s'est trouvée notamment dans le fait d'utiliser l'espace dans le sélecteur, et donc tous les enfants, petits enfants etc. se retrouvaient sélectionnés. Il fallait penser à ce cas là.

## Mardi 2020/10/27

### Javascript

* définition vs exécution
* définition de :
  * variables : `var maVariable = 2`
  * fonctions : `function maFonction (argument1) {var resultat = traitement(); return resultat;}`
* utilisation de la console du navigateur pour tester son code javascript

#### Fonction

C'est une boîte noire avec des entrées et une sortie.

### Typage variables

* string
* number
* array

On n'a pas vu les objets !! et c'est fait exprès :-)

### Commenter son code !

Indispensable ! surtout pour les fonctions javascript.

### Modification du html

1. on sélectionne l'élément à modifier grâce à un sélecteur CSS _qu'on connaît déjà_, et grâce aux fonctions `document.querySelector("selecteur>css.complique:first-child")`(pour récupérer le premier élément trouvé) et  `document.querySelectorAll("selecteur>css.complique:first-child")` (pour récupérer tous les éléments qui correspondent)
2. une fois récupéré dans une variable "elementHtml" (par exemple) on modifie `elementHtml.innerText = "TOTOTATATITI"` ou `elementHtml.InnerHTML = "<h2>Un nouveau H2</h2>"`

## Mercredi 2020/10/28

### Javascript conditions IF

#### decouverte des conditions IF  et exercices

 * if

 * else if

 * else

 * == compare la valeur

 * === compare la valeure et le type (string ou int) 

 * \> superieur

 * < inferieur

 * `>=` superieur ou egal

 * <= inferieur ou egal

 * != different de

 * && et

 * || ou

#### si vrai (true)

```
if (a == b) {
  alert("vrais a == b");
} else if (c === d) {
  alert("vrais c == d");
} else {
  alert("faux");
}
```

## Jeudi 2020/10/29

### Javascript conditions SWITCH

decouverte des conditions SWITCH et exercices
la condition switch à pour parametre 
une valeur ou une variable entre les () 
et elle fonctionne par des case (cas)
le break; permet de stoper le cas si la
valeur ce trouve das se cas 

```
var a = 5;

switch (a) {
  case "admin":
    alert("switch votre role est admin");
    break;
  case 5:
  case 6:
    alert("switch la valeur est 5");
    break;
  default:
    alert("switch rien");
}
```

## Lundi 2020/11/02

### Javascript boucle FOR

boucle FOR et exercices

parametre 1  i=0 on commance la boucle par 0
parametre 2  tant que i <= 10 continue la boucle
c++ ancremante la variable i par 1  

```
for (i = 1; i <= 10; i++) {
  console.log(i);
}
```

## Mardi 2020/11/03

### Javascript boucle WHILE

boucle WHILE et exercices

je declare une variable var i=1 pour commance la boucle par 1
je met comme parametre tant que i <= 10 continue la boucle
c++ ancremente la variable i par 1  

```javascript
var i = 1;
 
while (i <= 10) {
  console.log(i);
  i++;
}
```

## Lundi 2020/11/09

### Javascript Tables

Table array() et exercices

je decrale une variable "cars" et j'alimente par une tableau 
la difference entre une variable avec une seule valeur, et une variable
avec un tableau, cest que le la variable contiens plusieurs valeurs
les taleau fonction par "position" autrement appeler "clé", la premiere position c'est 0 puis 1,2...

```javascript
var cars = ["Saab", "Volvo", "BMW", "citroen", "renault", "peugeot"];

for (i = 0; i < cars.length; i++) {
  document.querySelector("#voitures").innerHTML += "<li>position(clé) : " + i + " valeur: " + cars[i] + "</li>";
}
```

## Mardi 2020/11/10

### Javascript TP Boutique

Nous avons crée un projet BOUTIQUE pour faire des exercices HTML,CSS et JS

Le projet à pour but de mettre en place tous ce que nous avons fait depuis le debut des cours.

* HTML, creation en respectent de la structure HTML
* CSS, mise en place des styles dans tous le projet
* JS, creation des variable des fonctions, des tables, conditions et leurs utlisation, 

La structure HTML et CSS est realiser par tous le groupe le jour meme

## Jeudi 2020/11/12

### Exercice pour comprendre les tableaux

Ecrire une liste d'élèves dans un tableau javascript et l'écrire sous forme de liste html grâce à une boucle for.

Puis ajouter un bouton qui trie la liste par ordre alphabétique et qui la réaffiche.

Pour ne pas dupliquer le code on utilise une fonction !

### Travail sur les commentaires dans le code

### Reprise du TP banque

Adapter le code du formateur qui ne marche que pour le premier compte, pour qu'il marche pour les 2 comptes !

**Sans faire de copier coller**

## Vendredi 2020/11/13

### Reprise du TP banque

Objectif: maîtriser les fonctions.

On essaie de faire des fonctions qui marchent pour n'importe lequel des comptes bancaires html.

Alors qu'avant la fonction ne modifiait que le premier compte qu'elle trouvait, il faut maintenant lui donner le compte qu'elle doit modifier.

### Addendum fonctions :

**Une fonction est une ACTION**, donc on doit lui dire qui doit l'effectuer, et avec quoi etc.

=> les arguments sont **indispensables** !

### Installation git + github

1. création du compte github
2. installation de git sur les pc (pour windows par ex c'est ici :[git for windows](gitforwindows.org)) (on accepte tous les paramètres par défaut)
3. paramétrage de vscode pour utiliser git (il suffit de le relancer !!)
4. mise à jour email et name de "git config"
5. premier commit => autorisations github demandées et acceptées !
6. modifier un fichier (créer un README par exemple) et le "commiter" et l'envoyer sur github
7. on vérifie que tout est bien affiché sur github
8. profit

## Lundi 2020/11/16

### Javascript TP Boutique

Nous avons continuer sur le projet BOUTIQUE en integrent le JS
Creation des fonction et les tableau et execution à partir du HTML

## Mardi 2020/11/17

### Javascript TP Boutique

Nous avons continuer sur le projet BOUTIQUE en integrent le JS
Creation des fonctions, les condition, les boucles et les tableaux et execution à partir du HTML

### Javascript Objet

Decouverte des Objet
un objet contient des propriétés et des méthodes :

```javascript
var car = { 
  type:"Fiat",// propriété : "valeur"
  model:"500", // propriété : "valeur"
  color:"white",// propriété : "valeur"
  nomComplet : function() { return this.type + " " + this.model; } // Methode
};
```

pour appeler un une propriété dans l'objet car on appel la variable suivie d'un point suivie du nom de propriété

```javascript
car.model;
```

## Jeudi 2020/11/19

### Travail sur les objets

Création d'un site web simple pour afficher une liste d'élèves.

Les élèves sont des objets avec un nom, un prénom et un âge.

Travail collaboratif sur glitch : https://glitch.com/edit/#!/different-boundless-break

On a bien noté qu'il fallait utiliser la syntaxe "." pour accéder à la propriété d'un objet. 
Mais on peut également y accéder en faisant `objet["string_propriete"]` . 
Exemple : `[1, 2, 3]["length"]` 

### Fonction en paramètre d'une fonction

On a essayé de trier la liste des objets. Mais javascript n'est pas capable de décider si un objet est oui ou non plus grand q'un autre !!

Par exemple est-ce que l'objet `{nom: "Rambo", prenom: "John"}` est plus grand que l'objet `{nom: "Schwarzenegger", prenom: "Arnold"}` ?? puisqu'ils font parti tous les 2 de la liste `expandables`.

Comme javascript ne peut pas le deviner, il nous demande de lui donner une fonction capable de comparer 2 éléments l'un par rapport à l'autre. Elle doit renvoyer 1 si le premier est plus grand, -1 sinon.

```javascript
function comparerBourrin(acteur1, acteur2){
   return acteur1.nom > acteur2.nom ? 1 : -1;
}
```

Et pour l'utiliser il faut la passer, **sans l'appeler** en argument de l'appel de `sort()`, c'est à dire dans notre cas : `expandables.sort(comparerBourrin)`.

Puis on a essayé de faire une bascule pour se souvenir de l'état de tri (ascendant ou descendant) entre les clics.

## Vendredi 2020/11/20

### Reprise du TP "objet"

Explications détaillées du TP, revue des concepts de la veille, notamment les appels de fonctions en paramètre d'autres fonctions.

### Condition "ternaire"

Version abrégée du test :

```javascript
if (condition){
    action1();
} else {
    action2();
}
```

en 

```javascript
(condition) ? action1() : action2();
```

et le résultat des actions 1 ou 2, s'il y a des `return` dans ces fonctions, peut être stocké dans une variable, par ex: 

```javascript
var resultat = condition ? action1() : 0;
```

### Premier aperçu de la méthode `.bind`

Ce sera important quand on abordera les classes ou React ou les fonctions fléchées ES6, donc on a abordé la méthode `.bind` pour les fonctions.

On peut "pré-remplir" un argument d'une fonction, sans l'appeler, pour obtenir une fonction avec autant d'arguments disponibles en moins.

Si l'on a par exemple une fonction ` consulteManga(serie, tome, chapitre)` qui renvoie des informations sur un chapitre dans un tome d'une série de manga, on peut faire la chose suivante :

```javascript
var consulteMangaNaruto = consulteManga.bind(null, "Naruto");

// affiche les informations spécifiques concernant la série Naruto :
consulteMangaNaruto("tome24", "chapitre236");
```

On voit que la fonction `consulteMangaNaruto` n'a plus que 2 paramètres. Car elle a déjà un argument qui lui est donné par défaut, c'est "Naruto", donné en première position.

`consulteMangaNaruto` est donc une variable, certes, mais surtout une **fonction** ! qui est renvoyée par la méthode `.bind` de la fonction `consulteManga` - qui est donc en passant également un objet !

### Révisions HTML

Pour se remettre de ces émotions, petite révision HTML grâce au site [webdesign en 4minutes](https://jgthms.com/web-design-in-4-minutes/)

### Révisions Javascript

Fait tous ensemble collaborativement, reprise depuis les bases, via le tutoriel [javascript en 14 minutes](https://jgthms.com/javascript-in-14-minutes/) ! (C'est mensonger, cela nous a pris 2h !!)

## Lundi 2020/11/23

### Decouverte de LET et CONST

Var = on peut redeclarer et changer sa valeur 
Let = on ne peut pas redeclarer mais on peut changer sa valeur
Const = on ne peut pas redeclarer mais on peut pas changer sa valeur

Explications détaillées du TP, revue des concepts de la veille, notamment les appels de fonctions en paramètre d'autres fonctions.

### Variable LET

Example LET :

```javascript
let test = 5;
    test = 18;

    for (let i = 0; i < 10; i++) {
        // some statements
        document.querySelector("#demoLet2").innerHTML += i;
    }

    document.querySelector("#demoLet").innerHTML = test;
```


### Variable CONST

Example CONST :

```javascript
 const i = 20;
//i = 10; erreur
    document.querySelector("#const").innerHTML = i;
    const monTest = function() {
        alert("hello");
    }
    monTest();

    const monObjet = {
        a: "paris",
        b: function() {
            aler("test");
        }
    }

```

## Mardi 2020/11/24

### EVALUATION HTML, CSS et JavaScript
Création d’un site de profile de la Classe 
Nom du site DWWM 93


L’objet de site est de présenter les étudiants du groupe DWWM MTE 93 2021 aux entreprises pour trouver leurs stages.
Le site doit avoir le logo de GRETA MTE 93 et un menu (Accueil, Formation, Contact), le contenue, et un footer.

### Header
Logo du GRETA MTE 93 et menu (Accueil, Formation, Contact)

### Contenue au centre de la page (main)
#### Accueil
La page d’accueil doit porter une liste des étudiants du DWWM leurs noms, prénom, photos et un bouton pour afficher le profil de l’étudiant dans une fenêtre.
Le profil doit être afficher dans une fenêtre qui comporte tous les informations de l’étudiants
* Nom
* Prénom
* Tel
* Email
* Photo
* Description (sur ses formation)
* Niveau sur HTML, CSS et JS (avec une barre de progression)
* Un lien vers son CV (lien fictive)
* Un formulaire de contact (les champs * obligatoire et contrôler)
    * Nom*
    * Prénom
    * Tel*
    * Email*
    * Sujet*
    * Message*
    * Bouton d’envoie



#### Formation (nouvelle page)
Description de la formation DWWM et son révérenciel
Contact (nouvelle page)
Formulaire de contact général (les champs * obligatoire et contrôler)
* Nom*
* Prénom
* Tel*
* Email*
* Sujet*
* Message*
* Bouton d’envoie
#### Footer
Le contenue en centre « DWWM 2020-2021 – votre prénom et nom»

 
### Réalisation du projet sur 100 points

Le menu doit être crée à partir d’un tableau JS
Les informations des étudiants doivent venir un objet JS
* Créations des maquettes (zoning, wireframe), desktop et mobile 20 points
* Site responsive desktop et mobile 30 points
* HTML sur 10 points : bien propre (basiles ouvert et fermer, titre, h1, p, ect…) 
* CSS sur 15 points: 
    * Media = 4 points
    * Flex = 5 points, 
    * Sélecteurs (baliste = 2 points, id= 2 points, class = 2 points)
* JS sur 25 points: 
    * Variables = 2 points
    * Fonctions = 5 points
    * Conditions = 5 points
    * Boucles = 5 points
    * Tableaux = 4 points 
    * Objets = 4 points

Les pages Accueil (index.html), Formation (formation.html) et Contact(contact.html) doit avoir le même design.

À rendre le projet en .zip ou .rar et elle doit contenir tous les éléments (zoning, wireframe et code) avant 16h le 24/11/2020
## Mercredi 2020/11/25

Découverte et inscription sur "codingwars.com".

Plusieurs exercices réalisés ensemble et corrigés ensemble.

## Jeudi 2020/11/26

Correction en "live coding" de l'évaluation faite le mardi 24.

cf [https://github.com/dwwm93/2020/tree/master/evaluation/correction](https://github.com/dwwm93/2020/tree/master/evaluation/correction).

et sur [glitch](https://glitch.com/edit/#!/cypress-obtainable-spandex)

## Mercredi 2020/12/02

des exercices pour jquery : [w3schools](https://www.w3schools.com/jquery/exercise_jq.asp?filename=exercise_jq_selectors1)

=> exercices : selectors , get, set, add, remove, hide and show (modifié) 

l'explication pour l'exercice 6 des selecteurs : https://api.jquery.com/odd-selector/ , c'est équivalent à "nth-child(odd)" d'habitude

pour l'instant, il n'y a pas besoin d'aller lire cette page !! c'est la doc officielle jquery, mais elle n'est pas très accessible aux débutants

à savoir : "GET" = récupération des données, donc il s'agit des méthodes jquery qui lisent les valeurs, comme $('p').text() ou $("input#prenom").val() -> ça va lire le contenu du texte des balises <p> ou lire la valeur des input d'id=prenom !

quant à "SET" = modification des données, donc on utilise les mêmes méthodes mais en donnant des paramètres qui vont remplacer la valeur actuelle, ex: $('p').text("nouveau texte") 

vous pouvez zapper les questions sur les "attributs"

### Première présentation de AJAX

#### Version avec "load"

```javascript
$("article#infos>section:first-child").text("Je remplis ma section.");

const urlChuckNorris = "https://api.icndb.com/jokes/random";

const urlPokemon = "https://pokeapi.co/api/v2/pokemon/";// https://api.jquery.com/load/

/**
 * Affiche dans la balise pre>p un chuck norris fact
 */
function afficheChuck() {
  $("article#infos>section>pre>p").load(urlChuckNorris);
}

/**
 * Affiche les caractéristiques du pokemon demandé !
 *
 * @param {string} pokemon
 */
function affichePokemon(pokemon) {
  const url = urlPokemon + pokemon; // https://pokeapi.co/api/v2/pokemon/pikachu si pokemon = 'pikachu'
  $("article#infos>section>pre>p").load(url);
}
```

#### Version avec .get

```javascript
/**
 *
 * @param {string} pokemon Nom du pokemon à afficher
 */
function affichePokemon(pokemon) {
  let url = urlPokemon + pokemon;
  $.get(url).done(function (resultat) {
    console.log(resultat);
    $("article#infos>section>p").text(resultat.name);
    $("article#infos>section>p").append(
      "<img src='" + resultat.sprites.front_shiny + "'>"
    );
  });
}
```

## Jeudi 2020/12/03

https://www.w3schools.com/jquery/exercise_jq.asp  aujourd'hui on va se mettre en jambe en faisant "cssClasse", "animate", "events" et "traversing"

pour les events : https://www.w3schools.com/jquery/jquery_events.asp

### Exercice :

*   ajoutez plusieurs balises "p" avec un lorem dedans
*   on click sur un "p", je voudrais changer la couleur de fond en rouge par ex, et je voudrais que cette fonction soit anonyme
*   on double click sur p, je voudrais changer la couleur du texte en blanc, et  je voudrais que cela utilise la fonction existante ci dessous : 

```javascript
function texteBlanc(){
  $('p').css('color', "white");
}
```

Correction :

```
function texteBlanc(){
  $('p').css('color', "white");
}// fonction "anonyme"
$("p").click(function(){
  $('p').css("background-color", "red")
});
// fonction nommée "texteBlanc"
$("p").dblclick(texteBlanc);
```

ou on aurait pu écrire `$('p').on("dblclick", texteBlanc)`

si tu veux donner un paramètre à texteBlanc (genre texteBlanc(gras){ pour dire que tu veux ou pas mettre aussi en gras)

Sachant qu'on a donc :

```
function texteBlanc(gras){
   if (gras) {
     $('p').css({color: "white", fontWeight: 600});
   }
   else {
     $('p').css("color": "white");
   }
}
```

2 possibilités :

1.  ``` function texteBlancGras(){
   texteBlanc(true);
}
```

et on passe texteBlancGras à $('p').dblclick(texteBlancGras) (modifié) 

2. `$('p').dblclick(texteBlanc.bind(null, true))`

.bind va "créer" une nouvelle fonction avec les paramètres remplis les uns après les autres

si y'a plusieurs paramètres ça fait .bind(null, param1, param2, param3...)

### Exercice 2 : Plus dur :

=> je voudrais modifier non pas tous les "p" mais que celui que j'ai cliqué !!!

SOLUTION : $(this) !!!

on reconnaît $() de jquery , et this de javascript

=> la magie :mage: elle est dans le "this"

dans la fonction appelée par dblclick, le "this" contient l'élément qui a déclenché l'event !

donc solution :

```
function texteBlanc(){
   $(this).css('color', 'white');
}
```

MAIS ATTENTION je ne peux plus appeler texteBlanc n'importe où maintenant, sinon this sera "window"! 

=> donc plutot utiliser des fonctions anonymes

SOLUTION POSSIBLE :

```
/**
 * Je me prépare à recevoir des événements "click" sur la colonne des noms des pokemons
 *
 */
$("article#tableau>table td.nom").on("click", function () {
  // Je récupère l'élément cliqué de javascript
  let caseCliquee = this;
  // je le transforme en jquery pour pouvoir utiliser les méthodes "faciles"
  let caseJquery = $(caseCliquee);
  // je récupère le contenu de ma case, c'est à dire le nom du pokemon
  let pokemon = caseJquery.text();  // avec le nom je construis l'url
  let url = urlPokemon + pokemon;
  // puis je vais récupérer les infos avec AJAX !
  $.get(url)
    .done(function (data) {
      // Quand les infos sont récupérées, cette fonction anonyme est appelée
      // et jquery lui passe le résultat de la requete, qui se retrouve stocké
      // dans la variable "data".
      // On peut donc en extraire des infos :
      let poids = data.weight;
      let img = data.sprites.front_default;      // Puis je cherche à les afficher dans les colonnes adjacentes :
      let colonnes = caseJquery.siblings("td");
      // Je transforme chaque colonne reçue en JQuery pour pouvoir utiliser les méthodes
      // et je les remplis avec les infos.
      // NB: il y a  plein d'autres manières de faire, aussi bonnes voire meilleures que celle ci !
      $(colonnes[0]).html("<img src='" + img + "' />");
      $(colonnes[1]).text(poids);
    })
    .fail(function (data) {
      // Si la requete échoue, c'est cette fonction anonyme là qui va être utilisée par jquery,
      // et pas celle de ".done"
      console.log(data);
      // J'affiche l'erreur dans la case à côté :
      caseJquery
        .next()
        .html("<span style='color: red;'> " + data.responseText + " </span>");
    });
});
```

## Jeudi 2020/12/10


https://developer.mozilla.org/fr/docs/Web/HTTP/M%C3%A9thode

> HTTP définit un ensemble de méthodes de requête qui indiquent l'action que l'on souhaite réaliser sur la ressource indiquée. Bien qu'on rencontre également des noms (en anglais), ces méthodes sont souvent appelées verbes HTTP. Chacun d'eux implémente une sémantique différente mais certaines fonctionnalités courantes peuvent être partagées par différentes méthodes (e.g. une méthode de requête peut être sûre (safe), idempotente ou être mise en cache (cacheable)).

HTTP = moyen que les gens qui ont inventé internet utilisent pour que les machines communiquent entre elles

(ps : http:// ça vient de là ! et la version sécurisée : https://)

il faut imaginer internet comme une ville : pour relier les maisons on a fait les routes (=les cables), les adresses postales (les IP), les lettres/sonnettes - dsl pour l'analogie bof- (http)

et un protocole d'affichage (j'ai pas d'exemple pour la ville) le web

les méthodes qui nous préoccupent GET / POST / DELETE

GET = récupération de la page indiquée

POST = envoi d'une information à l'adresse indiquée

ex: formulaire !!

```html
<form action="index.html" method="post">
    <input name="nom" placeholder="quel est le nom du pokemon ?" />
    <button type="submit">OK</button>
</form>
```

DELETE = ??? à votre avis :sourire_narquois:

https://api.jquery.com/jquery.ajax/

sur la page https://api.jquery.com/jquery.get/ , pour la methode $.get, on voit que ça se base sur "$.ajax"

il disent : 

> This is a shorthand Ajax function, which is equivalent to:

```
$.ajax({
  url: url,
  type: "GET",
  data: data,
  success: success,
  dataType: dataType
});
```

### Exercice

sur la page que vous voulez, avec ajax vous allez faire un GET sur https://jsonplaceholder.typicode.com/users , et afficher le résultat dans un <pre> sans chichi

si tu veux que ce soit plus joli tu peux mettre direct JSON.stringify(data)

puis on va faire un "POST" sur la meme url

par le biais d'un formulaire pour commencer

SOLUTION : j'ai l'id 11 c'est bon

### POST jquery

le formulaire vous "déplace" vers la cible de l'action, donc vous vous retrouvez sur le site https://jsonplaceholder.typicode.com/users

avec la réponse id:11 

```
<form action="https://jsonplaceholder.typicode.com/users" method="POST">
    <input name="name" placeholder="Nom de l'utilisateur" />
    <button type="submit">Envoyer</button>
</form>
```

une des caractéristiques de la requête HTTP "POST" : c'est qu'elle peut transporter des informations supplémentaires

donc ici les infos c'est `{name: CE_QUI_EST_ECRIT_DANS_L_INPUT}`

ici name est la valeur de l'attribut "name" dans la balise input

donc si j'ai `<input name="prenom" />`  => quelles vont etre les infos POST-ées ?

=> {prenom: INPUT_VALUE}

la version jquery POST

$.post(url, data).done(function (response) .....

la différence c'est "data"

=> les données supplémentaires que le POST peut envoyer

sous la forme d'un objet js, exemple : `{ nom: "kim", prenom: "san goku" }` 

cf ici !

```
    .fail(function (data) {
      // Si la requete échoue, c'est cette fonction anonyme là qui va être utilisée par jquery,
      // et pas celle de ".done"
      console.log(data);
      // J'affiche l'erreur dans la case à côté :
      caseJquery
        .next()
        .html("<span style='color: red;'> " + data.responseText + " </span>");
    })
```

Donc on pourrait écrire ça :

```
const url = "https://jsonplaceholder.typicode.com/users";
const data = { nom: "baggins", prenom: "bilbo" };$.post(url, data).done(function(reponse){
   $('h1').text("SUCCESS !"); // ou pourquoi pas $('..............').html(JSON.stringify(reponse))
}).fail(function (reponse){
  $('h1').text("ERROR " + reponse.responseText);
})
```

BOOTSTRAP https://www.w3schools.com/bootstrap4/

https://www.w3schools.com/bootstrap4/trybs_template1.htm

## Vendredi 2020/12/11

bon, on se met en jambes en faisant l'exercice d'hier soir ?

on essaie de déclencher le $.post en cliquant sur le bouton submit

ca marche

Pour l'exercice :

*   est-ce que ça marchait bien pour vous sans changer de page avec le $.post hier ?
*   est-ce que vous arrivez à lire les valeurs de l'input du form et à les envoyer via le $.post ainsi que la valeur de l'attribut action du form pour remplir l'url du $.post ?
*   est-ce que vous arrivez à déclencher le $.post à partir du bouton submit ?
*   est-ce que vous arrivez à supprimer le submit par défaut du formulaire pour éviter de vous rendre sur la page indiquée dans `<form action="xxxx"`



vous ete sur discord??

oui

oui

:croissant:

:croissant:

je peut avoir un lien svp!

moi j’ arive pas

en fait perso j'ai téléchargé l'appli  

https://discord.com/channels/783391372169183265/783391372169183268
DiscordDiscord
Discord - A New Way to Chat with Friends & Communities
Discord is the easiest way to communicate over voice, video, and text. Chat, hang out, and stay close with your friends and communities. (62 ko)
https://discord.com/assets/ee7c382d9257652a88c8f7b7f22a994d.png

Thank's Rathak

merci

derien

https://stackoverflow.com/a/1357151/8721626 je pose ça là ...
Stack OverflowStack Overflow
event.preventDefault() vs. return false
When I want to prevent other event handlers from executing after a certain event is fired, I can use one of two techniques. I'll use jQuery in the examples, but this applies to plain-JS as well: 1.

il y a une différence entre le "event" du formulaire normal, et le "event" de jquery

ce n'est pas le même "event" !

celui de jquery il est redispatché à tous les autres (parce que je peux créer plusieurs $('xxx').on('click',  


<form ...>
  <button onclick='mafunc()' >clic
...function mafunc(event){
  event.preventDefault()
}

Ici c'est l'event du navigateur

Par contre si on utilise jquery !

on va avoir un bouton sans "onclick", et à la place on aura :

$('button').on('click', function (event) {..


ici l'event est un evenment JQUERY pas celui du navigateur, parce que je peux déclarer plusieurs on('click', ... sur le meme bouton  

donc pour un event jquery il faut :

event.preventDefault()


et

event.stopPropagation()


pour pas que l'event passe au formulaire quand même

3ème solution, celle d'Esat : `<form onSubmit="return false"`  

[preventDefault apical.xyzapical.xyz](https://apical.xyz/fiches/la_validation_d_un_formulaire_web_002/event_preventDefault_vs_event_stopPropagation)

ah merci !

Sympa le lien ! Merci !

https://www.w3schools.com/bootstrap4/bootstrap_colors.asp
w3schools.comw3schools.com
Bootstrap 4 Colors
Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.

https://www.w3schools.com/bootstrap4/bootstrap_containers.asp
w3schools.comw3schools.com
Bootstrap 4 Containers
Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.

https://www.w3schools.com/bootstrap4/bootstrap_typography.asp
w3schools.comw3schools.com
Bootstrap 4 Text/Typography
Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.

https://www.w3schools.com/bootstrap4/bootstrap_grid_basic.asp
w3schools.comw3schools.com
Bootstrap 4 Grid Basic
Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.

! important !!

### Exercice

2/12 sur la premiere et les 2 autres se répartissent le reste pour la page d'exemple, 
avec 3 colonnes

https://www.w3schools.com/bootstrap4/bootstrap_buttons.asp
https://www.w3schools.com/bootstrap4/bootstrap_button_groups.asp

https://www.w3schools.com/bootstrap4/bootstrap_cards.asp

https://www.w3schools.com/bootstrap4/bootstrap_carousel.asp

https://www.w3schools.com/bootstrap4/bootstrap_forms.asp

https://www.w3schools.com/bootstrap4/bootstrap_modal.asp

https://bootswatch.com/

puis ajouter une modale qui contient un form, et essayer de mettre le $.post de ce matin

## Jeudi 2020/12/17

NB: Pendant ce temps les élèves avaient les réunions pédagogiques.

On continue le projet de fin d'année avec des conseils sur la mise en page et le code.

### Mise en page Footer

[ressource alioze.com](https://www.alioze.com/footer)

> Tout d’abord, votre pied de page doit être divisé en une section différente pour chacun des éléments : menu de navigation, mentions légales et CGU, appel à l’action (CTA), icônes de réseaux sociaux, etc. Les éléments les plus importants (souvent les informations de contact ou les appels à l’action) doivent être mis en avant.

### CTA

> CTA = call to action => "Un call to action - aussi appelé CTA - est un élément cliquable positionné sur une page de site internet, un blog ou un email qui incite vos visiteurs à effectuer une action précise, mais une action utile qui les font avancer dans leur parcours d’achat. 
> Il peut prendre la forme d’une image, d’un lien, d’un bouton voire d’un bot et doit être utilisé à toutes les étapes du parcours d’achat. " (source : https://www.ideagency.fr/blog/call-to-action )

### JSON

pour rappel : JSON = chaine de caractère (c'est du texte) qui représente un "objet" javascript

On peut transformer un objet js en json et vice versa grâce à :

`JSON.stringify(objet_js)` : js => json

`JSON.parse(chaine_json)` : json => js

### Chaining

:danger:  si vous faites plusieurs "." en jquery d'affilée (genre $('#id1').append("...").append("xx").on("click"... , vous etes en train de faire ça : https://www.w3schools.com/JQuery/jquery_chaining.asp

    exemple :

    let elem = $('#id1');
    let res = elem.append("<p>texte</p>");

=> qu'y a til dans "res" ?? la balise "p" ou la balise "#id1" ?

donc si on fait `res.on("click" , function (....` => quel est l'élément qui déclenche le clic ? le clic sur le p ou le clic sur le '#id1' ? ! 

### Jquery each

```js
for (let key = 0; key < tableau.length; key++){
    let val = tableau[key]
    // traitement
}
```

c'est similaire à

```js
$.each(tableau, function (key, val) {
  // traitement
})
```

c'est jquery qui te fournit key et val à ta place


## Vendredi 2020/12/18

Dernière ligne droite pour le projet.

On fait bien attention :

1. à faire des fonctions génériques - boîtes noires -, qui prennent des arguments en entrée, et pas des fonctions qui vont modifier / utiliser des variables qui ne leur appartiennent pas

2. à écrire des commentaires de qualité qui expliquent fonctionnellement ce que font les bouts de codes ( syntaxe : 

```js
/**
 * Commentaire de ma fonction
 * @param {string} paramString blablabla
 */
```

3. à l'ordre de déclenchement des instructions, car quand on utilise $.get ou autres fonctions "ajax" (= asynchrone !!), l'ordre d'exécution n'est pas linéaire

### Révisions jquery / bootstrap

## Lundi 2021/01/04

Début du php !!

### Présentation 

* PHP = logiciel ET un langage
* par ex sur windows : le logiciel est php.exe
* le langage reste "PHP"

au départ ça voulait dire Personal Home Page le but c'était de générer du HTML
exactement le meme but que lorsqu'on créait des innerHTML en javascript

On crée un fichier "index.php" !

```php
<?php
  echo "premier code php";
?>
```
### Installation

1. Ouvrir le terminal intégré dans vscode
2. Taper `php -v`  (le v est en minuscule, et notez l'espace) 

pour ceux qui ont des windows, ça ne devrait pas marcher, pour les autres (mac, linux...) ça devrait le faire

comment faire pour les windowsiens ?

=> https://getcomposer.org/doc/00-intro.md#using-the-installer
getcomposer.orggetcomposer.org
Introduction - Composer
A Dependency Manager for PHP

on va installer "composer" (on s'en servira plus tard), et il va nous rendre php accessible partout

![install composer](img/composer-install-php.png)

options par défaut, sauf le "PATH" de php

exemple de chemin vers php pour les windows : C:/wamp64/bin/php7.2/php.exe

ensuite fermer vscode et le rouvrir, puis refaire php -v

https://www.wampserver.com/

#### Intelephense



### Code

plusieurs choses :

1. les variables commencent par des "$" en php (ici en js on aurait : let var = "texte";
2. les instructions se terminent par un ";" !!!!!!!
3. en js on aurait : `let bonjour = "Bonjour " + nom;` donc la concaténation des chaines de caractères en php se fait avec le "."

Exécution :

`php le_nom_du_script.php`

avec un espace entre php et `le_nom_du_script.php`.

Vu :

* tableaux
* boucles
* conditions
* tableaux associatifs

## Mardi 2021/01/05

### Exercice pour s'entraîner pour les fonctions

Afficher un tableau sous forme de texte.

But : utiliser uniquement les fonctions que je fournissais

### Correction ? (voir fichiers associés)

en js on faisait `res += "toto"` pour concaténer 2 strings, ici on fait `$res .= "toto";`

c'est égal à `res = res + "toto"`, et `"$res = $res . "toto";`

étape 1 du déroulement du code :

```php
$tbl .= ajouteSautDeLigne(genCol(majuscule($eleve["nom"])) . genCol(minuscule($eleve["prenom"])));
```

étape 2 du déroulement :

```php
$tbl .= ajouteSautDeLigne(genCol(majuscule("kim")) . genCol(minuscule("sangoku")));
```

étape 3 :

```php
$tbl .= ajouteSautDeLigne(genCol("KIM") . genCol("sangoku"));
```

étape 4 :

```php
$tbl .= ajouteSautDeLigne("KIM|" . "sangoku|");
```

étape 5 :

```php
$tbl .= ajouteSautDeLigne("KIM|sangoku|");
```

étape 6 :

```php
$tbl .= "KIM|sangoku|\n";
```

étape 7 :

```php
$tbl = $tbl . "KIM|sangoku|\n";
```

alors

```php
// si $tbl = "==========\n";
// alors
// => donc $tbl est égal à "==========\nKIM|sangoku|\n"
```

si je fais ensuite

```php
echo $tbl;
```

alors ça affiche :

```
==========
KIM|sangoku|
```

si je vous mets la meme chose formatée un peu mieux :

```php
$tbl .= ajouteSautDeLigne(
            genCol(
                majuscule(
                    $eleve[
                        $colonnes[0]
                    ]
                )
            ) . genCol(
                minuscule(
                    $eleve[
                        $colonnes[1]
                    ]
                )
            )
        );
```

il reste à faire

```php
afficheDansLeTerminal($tbl);
```

## Mardi 2021/01/12

phpmyadmin vs mysql vs sql 

### Manipulation de phpmyadmin

1. Création des tables à partir du script SQL créé dans looping ou JMerise, la veille à partir du MCD.
2. Affichage du résultat dans le concepteur de Phpmyadmin pour bien comprendre la différence
   entre le MCD et le MLD, et l'absence de "relation" dans le MLD, même si une ligne existe dans phpmyadmin
3. Régler les pbs d'auto increment
4. Remplir avec des données

### SQL /Mysql

pour nommer les identifiants (clé primaires!), il y a plusieurs formalismes :

* `id`
* `table_id` (en changeant 'table' bien sûr)
* `tab_id` (on garde 3 lettres)
* `id_table`

mais ça ne pose aucun pb quel que soit le choix

Par contre tout ce qui n'est pas comme ça, est probablement un mauvais choix

### Tables de jointures réexpliquées

### LDD

```sql
CREATE TABLE article(
   id INT  AUTO_INCREMENT NOT NULL ,
 ....
) ENGINE=InnoDB;
```

### Découverte des requêtes LMD

Jusqu'à présent, on a utilisé du "LDD" (CREATE , ALTER ...) pour donner les instructions à mysql sur comment créer la structure des données  

now il est temps d'utiliser le LMD !

c'est la partie de SQL qui permet de manipuler les données

=> lire les données :
`SELECT ..... FROM la_table;`

=> `SELECT col1, col2 ... FROM ma_table;`

```sql
SELECT name FROM user;  
```

> Petite recommandation : mettre en majuscule les mots clé SQL, et en minuscule le reste

NB: les ` sont facultatifs

si je veux toutes les colonnes : `SELECT * FROM ma_table;`

pour le `WHERE` : conditions que les données que je veux récupérer doivent valider

exemple : `SELECT * FROM utilisateur WHERE nom = 'dusse';`

la ca veut dire : selectionner toutes les colonnes d'utilisateur où le nom est "dusse" ?

```sql
SELECT * FROM utilisateur WHERE nom = 'dusse' AND prenom = 'jean-claude';
```

> autant de AND qu'on veut

```sql
SELECT * FROM utilisateur WHERE nom = 'dusse' OR prenom = 'jean-claude';
```

Ou Dusse ou les jean Claude?

le OR n'est pas exclusif, donc ce sera tous les jean claude + les dusse

```sql
SELECT * FROM utilisateur WHERE nom = 'dusse' OR prenom = 'jean-claude' AND age > 50;
```

:danger:

là c'est comme les "+" et les "x" qd vous étiez au collège : qui gagne ??!!

une idée de réponse : `SELECT * FROM utilisateur WHERE (nom = 'dusse' OR prenom = 'jean-claude') AND age > 50;`

#### INSERT

```sql
INSERT INTO ma_table (col1, col2, ...) VALUES (val1, val2, ...);
```

Ici l'ordre est important : val1 va dans col1, val2 va dans col2 ...

[w3schools sql](https://www.w3schools.com/sql/sql_syntax.asp) !

```sql
UPDATE ma_table SET col1 = val1, col2=val2 WHERE id= xxx;
```

ATTENTION à ne pas oublier le WHERE !!  

> permet de modifier tous les enregistrements (les lignes quoi) qui correspondent à la condition du WHERE

## Mercredi 2021/01/13

finalement on a vu quoi : on peut représenter ses données sous forme d'entités et de relations dans un MCD, en fonction des buts de l'application


ça nous permet de manière automatique de transformer ce modèle "théorique" ,  en modèle physique interprétable directement par les logiciels de base de données


dans notre cas on utilise des BDD relationnelles , donc qui permettent d'avoir des "relations" entre les tables, par le biais des clés primaires et clé étrangères ! (il n'y a donc pas de "lien" entre les tables, mais bien des "contraintes" entre les colonnes qui contiennent les clés primaires et celles qui contiennent les clés étrangères). Un base non relationnelle ne dispose pas de ces contraintes

dans notre cas bis, on utilise des BDD SQL , donc qui demandent du langage SQL pour savoir comment :

1. structurer les données que la BDD va stocker (LDD)
2. manipuler les données une fois stockées (LMD)

Pour le LDD on a vu déjà les requêtes SQL : `CREATE DATABASE ma_database;` et `CREATE TABLE ma_table (col1 INT ...) ENGINE=InnoDB;`, ainsi que vite fait `ALTER TABLE ma_table ...;`


et pour le LMD on a vu `SELECT` pour lire les données, `INSERT` pour créer des données et `UPDATE` pour modifier des données


l'intérêt de ce langage c'est qu'on peut l'exécuter sans interface graphique (sans phpmyadmin donc), directement depuis le php ! donc on va être en mesure depuis notre site d'aller lire des infos en base, les modifier, les créer etc.

:ordinateur: :tada: :gâteau: :informaticienne: :clavier: :homme_technologue:


### Projet informatique

Ordre à suivre :

1. recueil des besoins ! (cahier des charges, etc.)
2. conception (MERISE, wireframes, use case, UI/UX)
3. réalisation (back et front , dans l'ordre que vous voulez, mais le back est nécessaire au front, l'inverse non, donc probablement qu'il faudra commencer un peu + sur le back)

### Merise

En terme de Merise, les rappels pour le MCD :

* on regroupe les données dans les rectangles (appelés Entité)
* on définit des relations entre les rectangles, qui sont des relations fonctionnelles (qui dépendent du cahier des charges  ! c'est la fonction de notre application quoi), représentées par des ovales
* on précise nos relations avec des cardinalités, pour indiquer combien d'éléments différents on peut relier les uns aux autres

lors de la transformation en modèle physique , il faudra créer les fameuses contraintes, càd les colonnes qui vont contenir les clés primaires et étrangères


et :danger:  : si la relation entre 2 entités est ManyToMany (ie : plusieurs entités de type A peuvent être liées à plusieurs entités de type B, ex: user et role) alors ces colonnes seront stockées dans une nouvelle table !!

ceci étant comme tout est automatisé à partir du MCD dans looping / jmerise , ça peut être transparent pour vous. Mais sans logiciel vous seriez obligés de faire le MLD intermédiaire oui

### Suite SQL

```sql
DELETE FROM ma_table WHERE condition_pour_selectionner_mon_element_à_supprimer;
```

Exercice: 

Créer avec des requêtes SQL :

*    au moins 4 articles : n'importe
*    au moins 3 utilisateurs : "james bond", "sangoku kim" et n'importe
*    au moins 2 roles (et les lier aux utilisateurs) : "admin" et "moderateur"
*    au moins 2 catégories: "actualite", "covid"


    #1451 - Cannot delete or update a parent row: a foreign key constraint fails (`news1`.`user_role`, CONSTRAINT `user_role_user1_FK` FOREIGN KEY (`id`) REFERENCES `user1` (`id`))

c'est normal, tu essaies de supprimer une clé primaire, alors qu'elle est référencée par une clé étrangère qque part !

=> il faut supprimer dans l'ordre inverse des insertions qu'on a faites hier !!!

### Reprise du TP2

1. connexion à la bdd avec le fichier `connexion.php`
2. requetage et affichage dans un tableau html dans `accueil.php`

## Jeudi 2021/01/21

### MCD + Contraintes / Relations

Explications MCD / Merise, notamment la différence entre les relations (MCD) et leur traduction en MPD/SQL : les contraintes.

![MCD](img/2021-01-21_10-20-22.png)

### PHP PDO

Explications fonctionnement requêtage de BDD avec PDO et php.

* requetes
* requetes préparées
...

![pdo](img/2021_01_21_0j4_Kleki.png)
![pdo2](img/2021_01_21_0ju_Kleki.png)

### POO : Programmation orientée objet

![poo](img/2021_01_21_0l3_Kleki.png)
![poo2](img/2021_01_21_0r6_Kleki.png)


## Vendredi 2021/01/22

Mise en pratique POO sur le projet de news

Voir le code [ici](https://github.com/dwwm93/2020/2021-01-22-news)

## Lundi 2021/01/25

On continue la transformation du site de news en objet.

On commence notamment à faire de l'objet même pour les classes "non entités". On commence aussi à séparer les "Model" des "Vues".

## Mardi 2021/01/26

À partir du code fait la veille, on détermine l'organisation utilisée, et on apprend le MVC.

### MVC

![mvc](img/2021_01_26_0go_Kleki.png)

C'est un design pattern très pratique pour répartir les responsabilités.

Il faut bien connaitre tout et ne pas oublier le Router.

### Application au projet "news"

## Mercredi 2021/02/03

Reprise des cours objet précédents

### UML

Présentation

* MERISE : but créer une base de données
* UML : Langage de modélisation unifié : but représenter le fonctionnement de l'application

=> c'est un langage : utilisé pour communiquer entre différents métiers

Il y a bcp de schémas différents en UML, + qu'en Merise (MCD, MLD ...) !

On va se concentrer sur 2 schémas en ce qui nous concerne : Diagramme de Cas d'Utilisation, et Diagramme de Classe

#### Diagramme de cas d'utilisation

permet de voir qui agit sur le système (acteur), et ce qu'il peut faire (utilisations).

on n'a pas le choix :

* à gauche les acteurs
* à droite un rectangle qui représente le système
* les actions autorisées sont représentées par des ovales
* les relations de dépendances entre les acteurs ou entre les actions sont matérialisées par des flèches

FORMALISME obligatoire :
meme les bonshommes moches sont dans la norme !

NB : utile en phase de conception !

include : buy book ----> open account : le cas d'utilisation "open account" est "nécessaire" ("inclus") dans le cas d'utilsation "acheter livre"

extends : search------> buy : il indique que "search" peut venir "compléter" le cas d'utilisation "buy"

il faut garder le mot "extends" ou "inclide" à cote de la fleche sinon on ne peut pas les distinguer

du point de vue de "buy" les 2 flches n'ont pas la même direction

#### Diagramme de classe


    ---------------------------------------
    |      Ma_classe                      |
    ---------------------------------------
    | - propriétéPrivée : type            |
    | + propriétéPublique : type          |
    | # propriétéProtegée : type          |
    ---------------------------------------
    | + méthodePublique(arguments) : type |
    ---------------------------------------

ATTENTION toujours diviser le rectangle en 3 !

s'il n'y a pas de propriété ou de méthode, il faut mettre une division vide

Un diagramme de classe, permet de représenter... des classes :tada:

càd son nom, ses propriétés et ses méthodes + l'héritage et relations (par les flèches/traits)

Donc un parent => plusieurs enfants, un enfant => un parent

##### void

dans les types des propriétés, des arguments ou des retours, on trouve : "int", "string" etc.

un des types "speciaux" c'est void : c'est pour un retour de fonction *QUI NE RETOURNE RIEN*

ex: supprimeProfil()

```php
public function supprimeProfil(int $id): void
{
    $bdd->prepare("DELETE ......");
    // ...
    // PAS DE RETURN
}
```

si je fais `$return = supprimeProfil(1);` => dans $return il n'y a ... rien (void)

##### Héritage

ATTENTION la fleche de l'héritage, est "blanche" !! (triangulaire) (modifié) 

c'est une comme ça --|> et pas une comme ça --->

la flèche standard a une autre signification, donc à ne pas utiliser par erreur

##### Relations

on vient de voir les relations

et les flèches "triangle" c'est l'héritage

Pour la lecture des relations c'est l'inverse du MCD (la cardinalité est de l'autre coté du trait).

NB: static = souligné, protected = #

https://creately.com/blog/diagrams/class-diagram-relationships/

![résumé](img/Class-Diagram-Relationships.png)
	
## Jeudi 2021/02/04

### Révisions diagramme de classe

En particulier approfondissement des notions d'héritage et des types de données.

### Live coding

Adapter le code du trombi pour les bonnes pratiques en terme d'objets et d'héritage.

Premier aperçu des namespace.

## Jeudi 2021/02/11

 https://learn.web-develop.me/courses/developpement-moderne-avec-apiplatform-symfony-et-[…]introduction/358032-mettre-en-place-vscode-pour-travailler

Paramétrage de uwamp pour passer en php7.2 minimum (réinstallation composer etc.)

Puis installation de symfony 5 avec 

```sh
composer create-project symfony/website-skeleton trombi
```

Puis installation du [logiciel symfony](symfony.com/download) (on aurait pu l'utiliser
aussi pour faire le nouveau projet)

NB: au GRETA il faut récupérer le fichier symfony.exe donné par un camarade qui a pu l'installer
(dans `C:\Programmes\Symfony\symfony.exe` par ex)

ATTENTION : il y a le FRAMEWORK symfony, qu'on utilise, et il y a  le LOGICIEL symfony.exe qui est fait par les memes gens et qui va fournir un serveur comme wamp

Puis on commence à travailler sur les controllers et les templates.

cf vidéo [lior chamla symfony](https://www.youtube.com/watch?v=UTusmVpwJXo)

=> Symfony fait du MVC !

Model = Doctrine , Controller = Controller (sic), View = Twig

"doctrine" et "twig" ce sont des noms de "marques", càd le nom des logiciels qui vont gérer la vue et le model

`php bin/console make:controller`

`=> ProfilController`

dans la navbar, au lieu de mettre directement la route `<a href="/">accueil</a>` , on va utiliser le name de la route pour le récupérer : `<a href="{{ path('home') }}">accueil</a>`

pour rappel, on avait `@Route("/", name="home")`

## Vendredi 2021/02/12

```php
/**
 * @Route("/profile/13", name="profile_show")
 */
public function show(){
    $this->render('profile/show.html.twig');
}
```

=> `templates/profile/show.html.twig`

au greta : `./symfony.exe server:start` en étant dans le rep trombi.

### CSS / JS 

pour mettre des css ou des js à vous, il faut les déposer dans le répertoire public, genre dans `public/css`

et ensuite dans le template `base.html.twig` => ajouter le link stylesheet vers `/css/MAFEUILLEDESTYLE.css` (ne pas oublier le `/` du début)
(donc sans indiquer "public" dans le base html ).

### MVC Symfony : Model

ORM = Object Relational Mapper

Pour info les timestamp pour la base de données :
* 31:00 entity + manager + repository
* 33:20 migrations
* 34:54 fixtures
* 36:00 TP création db
* 37:51 TP création table / entity
* 42:25 TP creation migration
* 45:30 TP fixtures
* 50:00 Utilisation des repository + twig pour afficher infos
* 1:03:00 Injection de dépendances

### Connexion db

dans .env, la variable qui vous intéresse : `DATABASE_URL`

`DATABASE_URL= PROTOCOL://LOGIN:PASSWORD@HOSTNAME:PORT/DBNAME`

protocol = le type de bdd utilisée => donc nous on décommente celui "mysql" et on commente le "postgresql" !

pour tous ceux qui sont sur uWamp :

il faut modifier le fichier `UwAmp\bin\php\php7.2.7\php.ini` pour enlever le `;` devant `pdo_mysql` (donc cherchez ça dans le fichier ) 

(et aussi fileinfo et intl)


## Mardi 2021/02/16

Dans symfony, le "Model" est découpé en 3 : (et c'est géré par l'ORM Doctrine) 

* Entity => la classe associée à la donnée (penser "MCD" => conception) 
* Repository => la classe qui permet de requêter les données depuis la base et les transformer en version "objet" 
* Manager => ce qui permet de faire les modifications depuis un "objet" vers la base

### Objectif de la matinée : 

* afficher la liste des profils sur la page "/profil" avec des images et façon "trombi" donc avec des cards (https://www.w3schools.com/bootstrap4/bootstrap_cards.asp) "photo de profil + nom + prenom" (un peu comme vithurshan) 
* afficher un profil complet sur la page "profil/{id}" avec toutes les  informations du profil 
* dans la navbar, un lien "profils", un lien "postes" (voir point 5) et  le lien accueil 
* afficher les 3 derniers profils sur la page d'accueil "/" 
* créer les pages "/poste" et "/poste/{id}" pour lister les métiers  disponibles ("etudiant", "professeur", "stagiaire" ...) (l"entité  "Poste" aura juste un "id" et un "titre")

=> templating / styles : twig - bootstrap 

=> création entity / controller / fixtures (pour Poste) 

=> requête "custom" avec le repository

pour la requete custom : `$repo =  $this->getDoctrine()->getRepository(Profil::class);`  et  `$repo->findBy( [ ], ['id' => 'DESC'], 3);` et je vous expliquerai les paramètres qu'on est en train d'utiliser

### styles

dans  `public/` tu mets `css/styles.css`, et dans `base.html.twig` tu  mets `<link rel="stylesheet" src="/css/styles.css" />`

## Mercredi 2021/02/17

### Suite symfony :

pour ne pas commiter "vendor" => il faut mettre dans `.gitignore` :  le chemin relatif depuis le fichier gitignore vers "vendor/"

le but sera de faire un CRUD => "Create Read Update Delete" des entités, grâce au  controller. Nous on fait juste "R" pour l'instant !!

### injection de dépendances 

```public function index(ProfilRepository $repo): void  { }```

ça marche aussi pour les Entité dans le controller : ```#@Route('/profil/{id}', ...) public function show (Profil $profil): void { }```

### Forms

Avancée sur la vidéo symfony sur les forms de Lior Chamla

## Lundi 2021/02/22

Cours en présentiel + distanciel 

### Approfondissement des Forms

Live coding symfony + CUD (sans R) pour les profils

## Mardi 2021/02/23

### Relations entre entités

Avec vidéo de Lior, détail des relations ManyToMany, OneToMany etc.

### Aspect Sécurité

Présentation des firewalls, encoders et providers, et leur utilisation / mise en pratique pour la sécurité sur symfony.

# Git

## Ajouter un fichier dans .gitignore

Permet de ne jamais le commiter, même s'il est modifié.

### Contenu du fichier .gitignore

Si on veut ignorer `.env.local` et le répertoire `vendor` et tous les fichiers `.tmp` :

```
//.env.local
vendor/
*.tmp
.env.*
```

![](./img/git_github.png)
## Vendredi 21/05/2021

### API

> Application Programing Interface

2 aspects :

1. exposer une API (la développer vous-même)
1. utiliser l'API de quelqu'un d'autre

### Créer une API **REST**

Il existe plein de protocoles pour faire ça. Nous on verra juste les __API REST__.

Je zappe l'historique et les raisons de leur existence.

> A noter juste que les urls et les verbes HTTP qu'on verra après sont préexistants (de + de 20 ans) aux API REST. C'est juste une façon maline de les utiliser dans un cadre d'API.

#### Comment ?

1. utiliser les "url" (`iri`) pour représenter des "ressources" (_ex: `https://api.pokemon.com/pokemons/bulbizarre`_, ou _`https://coin.com/bitcoin/price`_ ...) => dans mon url, je peux _"lire"_ l'élément que je vais manipuler
1. utiliser les "verbes" HTTP pour décrire les actions réalisées : `GET`, `POST`, `PUT`, `DELETE` etc.
1. Les informations renvoyées sont dans un format 'données', ex: **"JSON"**, "YAML", "XML" ...

> Indépendant du langage utilisé !! c'est une norme "HTTP", donc au niveau de la requête ! càd de la communication entre le client et le serveur !! Pas au niveau du code !

#### Ressources

C'est à vous (développeur) de déterminer les urls(/iri) des ressources pour que ce soit clair.

Standard :

1. `baseUrl.com/items` : lister les "items" (c'est le "type" des données, en règle générale, c'est la `class` - au pluriel - de vos entités, ex: _`raouf.com/restaurants`_)
2. `baseUrl.com/items/1` (à généraliser `baseUrl.com/items/:id`) : récupère la ressource d'id 1 (ou d'id `:id`), ou bien utiliser une clé (`slug`) unique (cf mon exemple pokemon : `bulbizarre`)
3. `baseUrl.com/items/:id/:action` : ex: _`tradfast.com/restaurants/12/menu`_ (qui va renvoyer les mêmes données que si j'avais fait en 2 étapes : `tradfast.com/restaurants/12/` (dedans je lis la valeur de *id_menu_restaurant_12*) puis  _`tradfast.com/menus/:id_menu_restaurant_12`_) => ici je **déclenche des actions sur la ressource ciblée**
  
    > NB : la version "en 2 fois" est privilégiée, et on garde l'url avec les ":action" pour les actions qui ne pointent pas vers des ressources existantes

    Exemples d'actions "back" : `gretagram.ai/pictures/12/squarify`, `tradfast.com/restaurants/14/like` 

> NB : si mon url est du genre `csstc.com/index.php?resource=users&id=1` c'est pareil, mais c'est moche ! et on comprend moins !

#### Verbes HTTP

Ils servent à indiquer le type d'action effectuée sur la ressource ciblée par l'url.

* `GET`: sert à "récupérer" (get) les informations de la ressource (ex: GET `https://mangatech.lol/mangas/one-piece` => je récupère les infos associées : càd les propriétés de l'entité)

  *NB :* "GET" est l'opération par défaut des navigateurs
* `POST`: sert à "créer" des données (ex: POST `https://mangatech.lol/mangas` + `{'title': 'berserk', 'date': '2021-05-21'}` => crée une nouvelle entité "berserk" avec son id etc.)
* `DELETE`: sert à "supprimer" la ressource ciblée (ex: DELETE `https://mangatech.lol/mangas/naruto`)
* `PUT`: sert à "mettre à jour" la ressource. (ex: PUT `https://mangatech.lol/mangas/berserk` + `{'title': 'berserk', 'date': '1991-05-21'}` => update l'entité "berserk" avec une nouvelle date)

#### Données renvoyées dans un format "brut"

Le plus souvent on renvoie les données sous la forme d'un JSON **et non pas une page html** !!

=> pas de vue !

ex : 

```php
class RestaurantController
{
    // associée à la route /restaurants/:id
    function get($id): string
    {
        $restaurant = RestaurantRepository->find($id);

        // On transforme l'objet "$restaurant" qui est de type RestaurantModel, en chaîne de caractère json.
        return json_encode($restaurant);
        // avant :
        // include ("view/restaurant.php");
    }
}
```

=> MAIS ALORS ? COMMENT J'AFFICHE UNE JOLIE PAGE ???

##### Réponse

1. Modifier ses urls pour l'api et les appeler `baseUrl.com/api/restaurants/:id` : ne renvoie que des données alors que sans `api/` on renvoie la version avec "vue"
2. **ou** créer un front en pur javascript et les vues sont gérées par le front (et on utilise par exemple jquery pour aller chercher les infos dans le back : `$.post('api/restaurants', {name: "mcdo", adresse: "1 rue du greta, Noisy"})`)
# Sécurité

Mega important

### Vos idées ?

1. prepare sql - injection sql
1. validation formulaire front (expression rationnelles, type input...)
1. validation formulaire back (expressions rationnelles, escapespecialchars, contrôle des types, type des fichiers acceptés ...)
1. .env / constantes config pour ne pas commiter d'infos secrètes
1. paramétrer serveur web pour limiter les accès à certains fichiers
1. upload fichier : utiliser les mime/type pour vérifier le fichier => changer l'extension , changer le nom (uniqid) du fichier pour éviter un accès illégitime (ex : facebook `photos/ghuierg/iurhiure/frehrehreiheirghirehg.jpg`)
1. hashage de mot de passe (=> non hashé => **prison**)
1. code de qualité pour éviter les bugs (tests unitaires, tests de bout en bout ...)
1. Veille technologique, validation/tests de la qualité des urls/partenaires tierces (cf RGPD : responsabilité des fournisseurs _et_ des clients parfois)
1. RGPD : un DPO, un référentiel des traitements de données, la possibilité de fournir à un utilisateur toutes ses données (et comment on les utilise), supprimer ses données s'il le demande ou les exporter s'il le demande
1. https !
1. chiffrement des données
1. csrf : cross site request forgery
1. xss : cross site scripting
1. CORS : cross origin resource sharing

## Chiffrement / hashage

### Cryptage / décryptage / codage / décodage

Illisible. 

### Chiffrement

Partager un secret pour que les seules personnes qui connaissent le secret puissent lire le message.

> important : "Reversibilité" : je peux chiffrer et déchiffrer

exemples : A-vaut-K, RSA, ECDSA, ED25519 ...

RSA, ECDSA, ED25519 etc. sont des chiffrements asymétriques : avec une clé publique et une clé privée. (cf connexion à github : `ssh-keygen` pour éviter de taper son login mdp à chaque fois)

### Hachage (hash in english)

Notamment les mots de passe.

C'est quoi ?

> Rend illisible le même message de la même manière, **sans réversibilité**.

Hachage , mais pas "déhachage" (penser au steak).

Pour les BDD de mots de passe, si j'utilisais du chiffrement, la récupération de la clé secrète permettrait d'avoir accès à la liste de tous les mots de passe en clair.

#### Attaque contre la base hachée

**Brute force:** je calcule un tableau de correspondance entre tous les mots qui existent et les hash.

ex: azerty => ozhfloihdsfhfdvhvgfd

On a eu qques années de protection, mais aujourd'hui on peut trouver des tableaux pré-calculés de hashs de mdp !

#### Protection du moment : le Salt (le grain de sel)

Le but : augmenter artificiellement la taille du mdp pour lutter contre l'augmentation de la puissance de calcul des hackers.

1. inscription :
  * user => "toto" (4 caractères, bof)
  * app => `concat("toto" , 256 caractères au pif (salt))`
  * app => hash ce mdp (de 260 caractères)

2. connexion :
  * user => "toto"
  * app => `concat("toto" , avec les mêmes 256 caractères (stockés en clair dans ma bdd))`
  * app => password verify

Je suis protégé tant que les attaquants n'ont pas le tableau des mdp >= 260 caractères.

Pour éviter qu'un attaquant calcule le tableau (qui n'existe pas encore) uniquement pour mon salt => ce qui revient à calculer le tableau pour les 8 caractères classiques ! donc c'est pas très long.

=> astuce : un salt différent par utilisateur !

### https (ssl)

HTTP : protocole de communication entre machines sur internet.

> Analogie (un peu bancale) : http = description de comment envoyer un courrier à un destinataire (càd: enveloppe + adresse + timbre + exp ...)

=> est-ce que mon courier est protégé ? NON ! on peut ouvrir la lettre et la lire !

idem pour http : si je fais `POST mabanqueprivee.com {identifiant: "pierre99", mdp: "j'adore le code"}` alors n'importe quel équipement réseau qui peut lire les échanges HTTP peut lire votre login/mdp.

> l'idée du https est de chiffrer le contenu de ta requete http ! comme si tu mettais dans ton enveloppe un message codé.

#### Clé publique / clé privée

C'est une paire de secrets, ça s'appelle du chiffrement asymétrique !

Grâce à des calculs mathématiques, je peux :

* chiffrer un message avec ma clé privée : seuls ceux qui ont la clé publique peuvent le déchiffrer (donc tout le monde) => ça prouve mon identité
* chiffrer un message avec ma clé publique : seuls ceux qui ont ma clé privée (moi) peuvent déchiffrer le message => confidentialité

=> tout repose sur la sécurité de la clé privée ! ne doit pas être accessible !

#### Démarche

1. le site me passe sa clé publique
1. je demande à l'autorité de certification si la clé publique est bonne
2. j'utilise sa clé pour chiffrer ma demande (et lui envoyer ma clé publique en meme temps)
3. je lui envoie (et personne ne peut la lire)
4. le site déchiffre ma demande etc. et me répond en chiffrant avec ma clé publique + sa clé privée !

NB: pour vous : soit acheter un "certificat" à votre hébergeur (ovh, gandi...), soit utiliser letsencrypt.org qui fournit des certificats gratuits.

## Injection SQL

Réussir à faire exécuter du SQL par le site ciblé (victime).

* je peux mettre ma requete SQL pirate dans l'url
* ou dans un formulaire
* ...

ex: formulaire de connexion

* login : '"toto" OR 1=1 ;'
* password : "mdp"

=> que se passe-t-il dans mon back ?

```sql
SELECT *
FROM user 
WHERE login = $login
AND password = $password
```

Le problème il vient du fait que je prends la chaîne de l'utilisateur telle quelle dans ma requete SQL !

Autres exemples :
* `login: "";DELETE * FROM user;`
* `login: "";DROP DATABASE;`
* `login: "";UPDATE user SET admin=1 WHERE login=mon_login;`

### Comment on se protège ?

=> **requêtes préparées** 

```sql
SELECT *
FROM user 
WHERE login = :login
AND password = :password
```

Dans un premier temps, le SGBD écrit la requête correcte ! Puis il met dedans les variables **qui ne peuvent plus influencer la requête**. Donc il va chercher un login qui vaut '"";DROP DATABASE' au lieu de réécrire la requête.

#### Sans prepare :

1. j'écris mes chaînes de caractères SQL
2. je crée les requêtes associées

#### Avec prepare :

1. je crée la requête valide
2. j'insère ma chaîne de caractère

## CSRF : Cross Site Request Forgery (ou XSRF)

Un attaquant profite du fait que vous êtes loggé sur un site lambda, pour vous faire valider sur un site tiers un formulaire qui pointe vers le site lambda.

### Exemple

1. je suis loggé sur tradfast de raouf
2. je vais sur petithackermalin.com dans un autre onglet
3. sur "phm" il y a un formulaire bidon que je vais valider (il te promet un iphone 40 gratos)
4. le form en question : `<form action="tradfast.com/user/petithacker"><input name="admin" value="1"/></form>` (et non pas un envoi d'iphone XXX)
5. petithacker est maintenant admin sur le site de raouf, si l'utilisateur connecté en 1 avait les droits d'effectuer le POST du form.

### Comment on se protège ?

Je dois m'assurer que le formulaire vient bien de chez moi !

=> j'ajoute un champ caché **aléatoire** !! genre un token (hash ou autre) et il faut le stocker en session pour comparer le token reçu et le token généré dans le formulaire (stocké donc).

=> `token csrf`

## XSS : Cross Site Scripting

! nom un peu trop vague.

### Principe

Je crée un script (php, js, etc.) et je parviens à le faire exécuter par l'utilisateur que j'attaque.

### Exemple bien standard

Je poste un commentaire dans un formulaire d'un forum :

```js
alert("you have been pwnd");
```

L'utilisateur qui verra mon commentaire va déclencher l'alert !

ou

```php
<?php
  $bdd = BDD::connexion();
  new PHPMailer()->send("petithackermalin",$bdd->dumpDatabase());
?>
```

ou j'ai uploadé un fichier php `image.png` et le php s'exécute quand j'affiche ma photo de profil...

### Comment je me protège ?

> En codant correctement !

* empêcher les caractères spéciaux dans les champs texte (escape special chars...)
* en vérifiant le mime/type et extension des fichiers uploadés et en les renommant pour éviter leur exécution éventuelle

## CORS : Cross Origin Resource Sharing

> ! c'est une protection intégrée au navigateur, pas au serveur !

Empêcher (ou autoriser) l'accès à certaines ressources par le navigateur.

### Exemple

Je veux que les requêtes vers "api.tourismeform.com" ne proviennent que du site "tourismeform.com".

Cela évite que quelqu'un essaie de récupérer des informations depuis un autre site. (genre si je suis sur `hackervaillant.com`)

> ! cela ne marchera que si l'utilisateur utilise un navigateur récent. (si vous passez par curl, postman ou ie6 ce sera toujours possible)

### Nota Bene

C'est `api.tourismeform.com` qui indique au navigateur qui a le droit d'accéder à ses pages, et c'est le _navigateur_ qui fait la vérification.

C'est à vous, _développeur_, de bien paramétrer votre back pour autoriser les bons domaines à vous requêter.

## RGPD : Règlement Général sur la Protection des Données (GDPR)

> C'est le truc qui va vous envoyer en prison (https://www.legalplace.fr/guides/rgpd-sanction/) si vous faites pas votre taf correctement.

Règles à suivre pour la gestion des données de vos utilisateurs.

* hacher les mdp
* ne stocker **que** les données nécessaires au bon fonctionnement du site **et** pouvoir le prouver
* ne stocker aucune donnée "illégale" : orientation sexuelle, religion, information médicale etc. => nécessite une dérogation de la **CNIL** (Commission Nationale Informatique et Liberté)
* recueillir le consentement explicite et éclairé de l'utilisateur pour le traitement de ses données (pas de `opt-out` mais du `opt-in`) (cf: les cookies sur les sites)
* expliciter et publier les traitements de données
* il faut un responsable identifié pour la gestion des données, indépendant !
* portabilité des données : l'utilisateur peut demander la suppression de toutes ses données (exception: https://www.cnil.fr/fr/le-droit-leffacement-supprimer-vos-donnees-en-ligne, si obligations légales ou autres bonnes raisons), et l'export de toutes ses données pour les migrer vers un autre système (éventuellement)
* répondre < 1 mois, ou 8j si donnée de santé
* valable aussi si vous êtes sous-traitant
* attention aux accès aux données par vos salariés : ne doit avoir accès que si besoin 
* attention aux données _de vos salariés_
* obligation de prévenir la cnil et les utilisateurs en cas de fuite de données

https://www.cnil.fr/sites/default/files/atoms/files/bpi-cnil-rgpd_guide-tpe-pme.pdf

cf campagne de pub de signal https://signal.org/blog/the-instagram-ads-you-will-never-see/ : on sait qui vous êtes même si vous bloquez la pub.

### En cas d'infraction

* jusqu'à 4% (ou 20 millions €) du Chiffre d'Affaire mondial de l'entreprise (sachant que la marge des entreprises est en moyenne 30%, ça fait 1/6 minimum des bénéfices)
* [prison and co](https://www.legalplace.fr/guides/rgpd-sanction/)

## Social Engineering

LE truc le plus utilisé pour le piratage !!

> => Faire très attention à qui on fait confiance.

Il s'agit de faire grandir la confiance que les gens vous font, petit à petit.

ex: assistante du pdg qui fait des virements en pensant que le pdg a demandé.

### Phishing

!!
