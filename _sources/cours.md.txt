# Cours TP DWWM

## Mardi 2020/10/06

* création des répertoires "Code/greta" pour stocker correctement son code

* présentation formation:

  * objectifs de la formation
  * front / back
  * langages de programmation

* présentation vscode

  * notamment Emmet (avec "lorem" etc. pour l'aide au développement) qui est intégré à vscode

* présentation html / css / javascript

### 1er projet rapide

* index.html => choisi parce que c'est la norme des pages d'accueil
* balises standard : html, head, body, main, article, section, h1, h2, h3 ...
* tests du style en changeant dynamiquement le style dans la console développeur du navigateur

En live j'ai fait un `Code/greta/first/index.html` aussi, de qualité médiocre pour jouer avec ce qu'il est possible de faire.

### Présentation projet du formateur

J'ai montré vite fait ma page de mariage, mais surtout j'ai codé devant eux en une trentaine de minutes la page "trombi.html" dans le dossier "Code/greta/first", avec bootstrap / material design / des placeholder / du javascript etc.

Ressources :
* [placeholder photos](picsum.photos)
* [placeholder avatars](http://avatars.adorable.io)
* [bootstrap4 + material design](https://mdbootstrap.github.io/bootstrap-material-design/docs/4.0/bootstrap-components/alerts/)

## Lundi 2020/10/12

### Selecteurs CSS

Ecrire un menu en haut de sa page : probleme avec les block et les inline. (on ne s'apesantit pas sur le sujet, on laisse juste galérer suffisamment pour qu'ils comprennent que ça marche pas top)

NB : Si on veut que le lien en haut de la page prenne tout l'élément il faut jouer avec ["line-height"](https://stackoverflow.com/questions/40755950/make-a-tag-to-take-100-height-of-inline-block-parent)

### flexbox

Introduction à flexbox, [resource ici](https://css-tricks.com/snippets/css/a-guide-to-flexbox/), qui permet de la mise en page (sur 1 dimension) de façon très très simple.

On a repris l'exemple précédent, et à la fin on se rend compte qu'il suffit que le parent soir `display: flex;` pour que directement les enfants s'alignent sur une même ligne de manière propre.

On a vu comment on les aligne sur l'axe principal (ici horizontal) et sur l'axe secondaire (donc l'axe vertical), avec les propriétés qui se terminent par "-content" (pour l'axe principal) et "-items" pour l'axe secondaire. Tout marche pareil si mon axe principal devient l'axe vertical. (ie `flex-direction:column;`)

On l'a appliqué sur un TP2 qui consiste à écrire une page d'un journal, avec un bandeau de navigation, une section centrale qui contient 3 articles en colonne côte à côte, puis une section "contact" qui contient du texte et un formulaire, et enfin un footer.

## Mardi 2020/10/13

Poursuite du TP2 avec révision de flexbox, et des balises les plus courantes (ex: input avec placeholder).

Notamment on appuyé sur comment faire des liens dans la page (et le rôle des "id").

### flexbox

Attention : un élément flexbox ne peut gérer que ses enfants directs, pas ses petits enfants ou arrière petits enfants. On a insisté sur ce point.

Quitte, pour plus de mise en page, à ce que les enfants deviennent eux mêmes des éléments flexbox et qu'ils gèrent leurs propres enfants.

### selecteurs CSS

Révision de comment fonctionnent les selecteurs CSS, comment on les manipule, qu'il faut être le plus précis possible pour ne pas modifier des éléments qu'on ne veut pas modifier, et qu'il faut limiter le nombre d'id et de class, qui ne doivent servir qu'en dernier recours.

En effet, il vaut mieux éviter d'avoir à changer le code html quand on veut changer un style, il vaut mieux changer juste le css. (exemple: rajouter un élément dans ma barre de nav, sans avoir à lui donner la bonne classe ! mon selecteur CSS est fait de manière à le prendre de toute façon ! au pire on met juste l'id sur le parent "nav")

En + : découverte des selecteurs 
* `:hover`
* `:last-child`

## Jeudi 2020/10/15

Poursuite du Flexbox et decouvert du responsive @media
* découverte de la balise DIV et SPAN
  * <div> est une balise du type BLOCK et elle est fermante </div>
  * <span> est une balise du type INLINE et elle est fermante </span>

### flexbox
travail sur TPFlex, utilisation des display, flex-wrap, flex-direction.

### @media
Changement du style CSS en au chamgement du taille de l'ecran
* @media (max-width: 600px) {
*    h1 {
*        display: none;
*    }
* }

## Vendredi 2020/10/16

Découverte des parametres 
* `display`
* `padding`
* `margin` 
* `border` 

### @media
Poursuite du TPFlex en responsive
### Positions
Découverte du parametre position et urilisation dasn le fichier position.html et position.css
* `static`
* `relative`
* `fixed` 
* `absolute` 
* `sticky`  

## Lundi 2020/10/19

Creation d'un CV à partir d'un model, en utilisent le html et CSS.
Tous le code demandé pour créee le CV est déjà expliquer dans les cours precedent.
Le CV doit etre responsive.
Le model du CV est ajouter sur SLACK en IMAGE
A la fin de journé le code est aussi envoyé sur SLACK

## Mardi 2020/10/20

Le matin, on continue sur le CV, explication du code du model.
Hierarchie des balises.

### Macquetter une application 

Nous avons devouvert le maquettage et disquter des 4 etapes de maquettage
Photo mis sur SLACK

* Zonning
* Wireframe
* Mockup
* Prototype

## Mercredi 2020/10/21

On reprend zoning / wireframe , et on apprend la distinction UX (plutot zoning/wireframe) / UI (plutôt mockup/prototype).

TP zoning / wireframe pour leur CV, sur diagrams.net.

Les questions portent sur les choix effectués en terme d'UX (pourquoi tel élément est là,pourquoi il fait cette taille ...) et sur les adaptations responsive.

Présentation d'éléments de design "standards", comme les règles proposées par le material design.

On a vu également quelques exemples de sites avec un bon UX/UI et d'autres catastrophiques.

## Jeudi 2020/10/22

Retour sur les wireframes et réalisation des mockups.

### Print CSS

Faire une version du css adaptée à l'impression pour générer un CV imprimé.

* [explication macro sur le site de mozilla](https://developer.mozilla.org/fr/docs/CSS/Premiers_pas/M%C3%A9dias#Impression)

### TODO

* [web design in 4 minutes](https://jgthms.com/web-design-in-4-minutes/)
* [interneting is hard](https://www.internetingishard.com/html-and-css/)

## Lundi 2020/10/26

Réalisation du site web pour le cv dont on avait fait le zoning, le wireframe et le mockup.

Obligation d'utiliser un positionnement fixed ou sticky pour le menu, et obligation de faire un site responsive.

Ceux qui ont eu le temps on essayé de faire une media query "print" que l'on peut voir en utilisant l'impression par chrome.

### Sélecteurs CSS

exo "inversé": à partir du sélecteur CSS proposer une arborescence HTML qui convient.

La subtilité s'est trouvée notamment dans le fait d'utiliser l'espace dans le sélecteur, et donc tous les enfants, petits enfants etc. se retrouvaient sélectionnés. Il fallait penser à ce cas là.

## Mardi 2020/10/27

### Javascript

* définition vs exécution
* définition de :
  * variables : `var maVariable = 2`
  * fonctions : `function maFonction (argument1) {var resultat = traitement(); return resultat;}`
* utilisation de la console du navigateur pour tester son code javascript

#### Fonction

C'est une boîte noire avec des entrées et une sortie.

### Typage variables

* string
* number
* array

On n'a pas vu les objets !! et c'est fait exprès :-)

### Commenter son code !

Indispensable ! surtout pour les fonctions javascript.

### Modification du html

1. on sélectionne l'élément à modifier grâce à un sélecteur CSS _qu'on connaît déjà_, et grâce aux fonctions `document.querySelector("selecteur>css.complique:first-child")`(pour récupérer le premier élément trouvé) et  `document.querySelectorAll("selecteur>css.complique:first-child")` (pour récupérer tous les éléments qui correspondent)
2. une fois récupéré dans une variable "elementHtml" (par exemple) on modifie `elementHtml.innerText = "TOTOTATATITI"` ou `elementHtml.InnerHTML = "<h2>Un nouveau H2</h2>"`

## Mercredi 2020/10/28

### Javascript conditions IF

#### decouverte des conditions IF  et exercices

 * if

 * else if

 * else

 * == compare la valeur

 * === compare la valeure et le type (string ou int) 

 * \> superieur

 * < inferieur

 * `>=` superieur ou egal

 * <= inferieur ou egal

 * != different de

 * && et

 * || ou

#### si vrai (true)

```
if (a == b) {
  alert("vrais a == b");
} else if (c === d) {
  alert("vrais c == d");
} else {
  alert("faux");
}
```

## Jeudi 2020/10/29

### Javascript conditions SWITCH

decouverte des conditions SWITCH et exercices
la condition switch à pour parametre 
une valeur ou une variable entre les () 
et elle fonctionne par des case (cas)
le break; permet de stoper le cas si la
valeur ce trouve das se cas 

```
var a = 5;

switch (a) {
  case "admin":
    alert("switch votre role est admin");
    break;
  case 5:
  case 6:
    alert("switch la valeur est 5");
    break;
  default:
    alert("switch rien");
}
```

## Lundi 2020/11/02

### Javascript boucle FOR

boucle FOR et exercices

parametre 1  i=0 on commance la boucle par 0
parametre 2  tant que i <= 10 continue la boucle
c++ ancremante la variable i par 1  

```
for (i = 1; i <= 10; i++) {
  console.log(i);
}
```

## Mardi 2020/11/03

### Javascript boucle WHILE

boucle WHILE et exercices

je declare une variable var i=1 pour commance la boucle par 1
je met comme parametre tant que i <= 10 continue la boucle
c++ ancremente la variable i par 1  

```javascript
var i = 1;
 
while (i <= 10) {
  console.log(i);
  i++;
}
```

## Lundi 2020/11/09

### Javascript Tables

Table array() et exercices

je decrale une variable "cars" et j'alimente par une tableau 
la difference entre une variable avec une seule valeur, et une variable
avec un tableau, cest que le la variable contiens plusieurs valeurs
les taleau fonction par "position" autrement appeler "clé", la premiere position c'est 0 puis 1,2...

```javascript
var cars = ["Saab", "Volvo", "BMW", "citroen", "renault", "peugeot"];

for (i = 0; i < cars.length; i++) {
  document.querySelector("#voitures").innerHTML += "<li>position(clé) : " + i + " valeur: " + cars[i] + "</li>";
}
```

## Mardi 2020/11/10

### Javascript TP Boutique

Nous avons crée un projet BOUTIQUE pour faire des exercices HTML,CSS et JS

Le projet à pour but de mettre en place tous ce que nous avons fait depuis le debut des cours.

* HTML, creation en respectent de la structure HTML
* CSS, mise en place des styles dans tous le projet
* JS, creation des variable des fonctions, des tables, conditions et leurs utlisation, 

La structure HTML et CSS est realiser par tous le groupe le jour meme

## Jeudi 2020/11/12

### Exercice pour comprendre les tableaux

Ecrire une liste d'élèves dans un tableau javascript et l'écrire sous forme de liste html grâce à une boucle for.

Puis ajouter un bouton qui trie la liste par ordre alphabétique et qui la réaffiche.

Pour ne pas dupliquer le code on utilise une fonction !

### Travail sur les commentaires dans le code

### Reprise du TP banque

Adapter le code du formateur qui ne marche que pour le premier compte, pour qu'il marche pour les 2 comptes !

**Sans faire de copier coller**

## Vendredi 2020/11/13

### Reprise du TP banque

Objectif: maîtriser les fonctions.

On essaie de faire des fonctions qui marchent pour n'importe lequel des comptes bancaires html.

Alors qu'avant la fonction ne modifiait que le premier compte qu'elle trouvait, il faut maintenant lui donner le compte qu'elle doit modifier.

### Addendum fonctions :

**Une fonction est une ACTION**, donc on doit lui dire qui doit l'effectuer, et avec quoi etc.

=> les arguments sont **indispensables** !

### Installation git + github

1. création du compte github
2. installation de git sur les pc (pour windows par ex c'est ici :[git for windows](gitforwindows.org)) (on accepte tous les paramètres par défaut)
3. paramétrage de vscode pour utiliser git (il suffit de le relancer !!)
4. mise à jour email et name de "git config"
5. premier commit => autorisations github demandées et acceptées !
6. modifier un fichier (créer un README par exemple) et le "commiter" et l'envoyer sur github
7. on vérifie que tout est bien affiché sur github
8. profit

## Lundi 2020/11/16

### Javascript TP Boutique

Nous avons continuer sur le projet BOUTIQUE en integrent le JS
Creation des fonction et les tableau et execution à partir du HTML

## Mardi 2020/11/17

### Javascript TP Boutique

Nous avons continuer sur le projet BOUTIQUE en integrent le JS
Creation des fonctions, les condition, les boucles et les tableaux et execution à partir du HTML

### Javascript Objet

Decouverte des Objet
un objet contient des propriétés et des méthodes :

```javascript
var car = { 
  type:"Fiat",// propriété : "valeur"
  model:"500", // propriété : "valeur"
  color:"white",// propriété : "valeur"
  nomComplet : function() { return this.type + " " + this.model; } // Methode
};
```

pour appeler un une propriété dans l'objet car on appel la variable suivie d'un point suivie du nom de propriété

```javascript
car.model;
```

## Jeudi 2020/11/19

### Travail sur les objets

Création d'un site web simple pour afficher une liste d'élèves.

Les élèves sont des objets avec un nom, un prénom et un âge.

Travail collaboratif sur glitch : https://glitch.com/edit/#!/different-boundless-break

On a bien noté qu'il fallait utiliser la syntaxe "." pour accéder à la propriété d'un objet. 
Mais on peut également y accéder en faisant `objet["string_propriete"]` . 
Exemple : `[1, 2, 3]["length"]` 

### Fonction en paramètre d'une fonction

On a essayé de trier la liste des objets. Mais javascript n'est pas capable de décider si un objet est oui ou non plus grand q'un autre !!

Par exemple est-ce que l'objet `{nom: "Rambo", prenom: "John"}` est plus grand que l'objet `{nom: "Schwarzenegger", prenom: "Arnold"}` ?? puisqu'ils font parti tous les 2 de la liste `expandables`.

Comme javascript ne peut pas le deviner, il nous demande de lui donner une fonction capable de comparer 2 éléments l'un par rapport à l'autre. Elle doit renvoyer 1 si le premier est plus grand, -1 sinon.

```javascript
function comparerBourrin(acteur1, acteur2){
   return acteur1.nom > acteur2.nom ? 1 : -1;
}
```

Et pour l'utiliser il faut la passer, **sans l'appeler** en argument de l'appel de `sort()`, c'est à dire dans notre cas : `expandables.sort(comparerBourrin)`.

Puis on a essayé de faire une bascule pour se souvenir de l'état de tri (ascendant ou descendant) entre les clics.

## Vendredi 2020/11/20

### Reprise du TP "objet"

Explications détaillées du TP, revue des concepts de la veille, notamment les appels de fonctions en paramètre d'autres fonctions.

### Condition "ternaire"

Version abrégée du test :

```javascript
if (condition){
    action1();
} else {
    action2();
}
```

en 

```javascript
(condition) ? action1() : action2();
```

et le résultat des actions 1 ou 2, s'il y a des `return` dans ces fonctions, peut être stocké dans une variable, par ex: 

```javascript
var resultat = condition ? action1() : 0;
```

### Premier aperçu de la méthode `.bind`

Ce sera important quand on abordera les classes ou React ou les fonctions fléchées ES6, donc on a abordé la méthode `.bind` pour les fonctions.

On peut "pré-remplir" un argument d'une fonction, sans l'appeler, pour obtenir une fonction avec autant d'arguments disponibles en moins.

Si l'on a par exemple une fonction ` consulteManga(serie, tome, chapitre)` qui renvoie des informations sur un chapitre dans un tome d'une série de manga, on peut faire la chose suivante :

```javascript
var consulteMangaNaruto = consulteManga.bind(null, "Naruto");

// affiche les informations spécifiques concernant la série Naruto :
consulteMangaNaruto("tome24", "chapitre236");
```

On voit que la fonction `consulteMangaNaruto` n'a plus que 2 paramètres. Car elle a déjà un argument qui lui est donné par défaut, c'est "Naruto", donné en première position.

`consulteMangaNaruto` est donc une variable, certes, mais surtout une **fonction** ! qui est renvoyée par la méthode `.bind` de la fonction `consulteManga` - qui est donc en passant également un objet !

### Révisions HTML

Pour se remettre de ces émotions, petite révision HTML grâce au site [webdesign en 4minutes](https://jgthms.com/web-design-in-4-minutes/)

### Révisions Javascript

Fait tous ensemble collaborativement, reprise depuis les bases, via le tutoriel [javascript en 14 minutes](https://jgthms.com/javascript-in-14-minutes/) ! (C'est mensonger, cela nous a pris 2h !!)

