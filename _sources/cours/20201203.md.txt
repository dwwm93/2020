## Jeudi 2020/12/03

https://www.w3schools.com/jquery/exercise_jq.asp  aujourd'hui on va se mettre en jambe en faisant "cssClasse", "animate", "events" et "traversing"

pour les events : https://www.w3schools.com/jquery/jquery_events.asp

### Exercice :

*   ajoutez plusieurs balises "p" avec un lorem dedans
*   on click sur un "p", je voudrais changer la couleur de fond en rouge par ex, et je voudrais que cette fonction soit anonyme
*   on double click sur p, je voudrais changer la couleur du texte en blanc, et  je voudrais que cela utilise la fonction existante ci dessous : 

```javascript
function texteBlanc(){
  $('p').css('color', "white");
}
```

Correction :

```
function texteBlanc(){
  $('p').css('color', "white");
}// fonction "anonyme"
$("p").click(function(){
  $('p').css("background-color", "red")
});
// fonction nommée "texteBlanc"
$("p").dblclick(texteBlanc);
```

ou on aurait pu écrire `$('p').on("dblclick", texteBlanc)`

si tu veux donner un paramètre à texteBlanc (genre texteBlanc(gras){ pour dire que tu veux ou pas mettre aussi en gras)

Sachant qu'on a donc :

```
function texteBlanc(gras){
   if (gras) {
     $('p').css({color: "white", fontWeight: 600});
   }
   else {
     $('p').css("color": "white");
   }
}
```

2 possibilités :

1.  ``` function texteBlancGras(){
   texteBlanc(true);
}
```

et on passe texteBlancGras à $('p').dblclick(texteBlancGras) (modifié) 

2. `$('p').dblclick(texteBlanc.bind(null, true))`

.bind va "créer" une nouvelle fonction avec les paramètres remplis les uns après les autres

si y'a plusieurs paramètres ça fait .bind(null, param1, param2, param3...)

### Exercice 2 : Plus dur :

=> je voudrais modifier non pas tous les "p" mais que celui que j'ai cliqué !!!

SOLUTION : $(this) !!!

on reconnaît $() de jquery , et this de javascript

=> la magie :mage: elle est dans le "this"

dans la fonction appelée par dblclick, le "this" contient l'élément qui a déclenché l'event !

donc solution :

```
function texteBlanc(){
   $(this).css('color', 'white');
}
```

MAIS ATTENTION je ne peux plus appeler texteBlanc n'importe où maintenant, sinon this sera "window"! 

=> donc plutot utiliser des fonctions anonymes

SOLUTION POSSIBLE :

```
/**
 * Je me prépare à recevoir des événements "click" sur la colonne des noms des pokemons
 *
 */
$("article#tableau>table td.nom").on("click", function () {
  // Je récupère l'élément cliqué de javascript
  let caseCliquee = this;
  // je le transforme en jquery pour pouvoir utiliser les méthodes "faciles"
  let caseJquery = $(caseCliquee);
  // je récupère le contenu de ma case, c'est à dire le nom du pokemon
  let pokemon = caseJquery.text();  // avec le nom je construis l'url
  let url = urlPokemon + pokemon;
  // puis je vais récupérer les infos avec AJAX !
  $.get(url)
    .done(function (data) {
      // Quand les infos sont récupérées, cette fonction anonyme est appelée
      // et jquery lui passe le résultat de la requete, qui se retrouve stocké
      // dans la variable "data".
      // On peut donc en extraire des infos :
      let poids = data.weight;
      let img = data.sprites.front_default;      // Puis je cherche à les afficher dans les colonnes adjacentes :
      let colonnes = caseJquery.siblings("td");
      // Je transforme chaque colonne reçue en JQuery pour pouvoir utiliser les méthodes
      // et je les remplis avec les infos.
      // NB: il y a  plein d'autres manières de faire, aussi bonnes voire meilleures que celle ci !
      $(colonnes[0]).html("<img src='" + img + "' />");
      $(colonnes[1]).text(poids);
    })
    .fail(function (data) {
      // Si la requete échoue, c'est cette fonction anonyme là qui va être utilisée par jquery,
      // et pas celle de ".done"
      console.log(data);
      // J'affiche l'erreur dans la case à côté :
      caseJquery
        .next()
        .html("<span style='color: red;'> " + data.responseText + " </span>");
    });
});
```

